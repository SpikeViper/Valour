<div class="@Chosen_CSS">
    <img class="pfp" src="@pfpurl" @onerror="OnPfpError" style="@style">
    <div class="user-info">
        <p class="username" style="color: @User.GetMainRoleColor()">
            @if (User.Username.Length > 16) {
                @User.Username.Substring(0, 15)
            }
            else {
                @User.Username
            }
        </p>
        @((MarkupString)StaffString)
        @((MarkupString)BotString)
        <br>
        <div class="user-status-state">
            <div class="active-circle">
            </div>
            <p class="state">
                @User.GetState()
            </p>
        </div>
    </div>
</div>

@code {
    // Demonstrates how a parent component can supply parameters

    [Parameter]
    public PlanetUser User { get; set; }

    [Parameter]
    public bool First { get; set; }
    [Parameter]
    public bool Last { get; set; }
    [Parameter]
    public bool Only { get; set; }

    public string StaffString { get
        {
            if (User.Valour_Staff)
            {
                return "<div class='staff-tag'><p>STAFF</p></div>";
            }
            else
            {
                return "";
            }
        }
    }

    public string BotString { get
        {
            if (User.Bot)
            {
                return "<div class='bot-tag'><p>BOT</p></div>";
            }
            else
            {
                return "";
            }
        }
    }

    public string Chosen_CSS { get
        {
            if (Only)
            {
                return "sidebar-user only";
            }
            else if (First)
            {
                return "sidebar-user first";
            }
            else if (Last) {
                return "sidebar-user last";
            }
            else
            {
                return "sidebar-user";
            }
        }
    }

    public string pfpurl = "/icon-512.png";
    public string style = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrWhiteSpace(User.Pfp_Url))
        {
            pfpurl = User.Pfp_Url;
        }
    }

    protected async Task OnPfpError()
    {
        pfpurl = "/icon-512.png";

        int r = ClientUserManager.Random.Next(24) * 15;

        style = $"filter: hue-rotate({r}deg) saturate(2)";

        StateHasChanged();
    }
}
